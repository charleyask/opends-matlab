%% Pre-process EEG data step 2 - Interactive ICA component rejection
%
% This script allows the user to interactively select and reject individual
% ICA components. It requires step 1 to have been completed
% ("preprocessing_1_eeg.m").
%
% Note: you need to have loaded a variable named "params", with all the
% required fields, for this pipeline to run properly. Use the
% "set_preprocessing_params_eeg.m" script to set your parameters, then run
% this script.
%
% Steps:
% 1. Load ICA result
% 2. Show ICA results
% 3. Prompt for components to reject
% 4. Remove components and save result as "eeg-{uid}_preproc2.mat"
%
%

if ~exist('params','var')
    error('No params variable set. Aborting preprocessing.') 
end

addpath(params.general.fieldtrip_lib);

subjects = strsplit(fileread(sprintf('%s/%s/%s', params.io.input_dir, ...
                                                 params.io.metadata_dir, ...
                                                 params.general.subjects_file)));

fprintf('\n\n==== START OF PROCESSING ===\n\n');
                                             
fprintf('\nFound %d subjects.\n', length(subjects));
                                 
for i = 1 : length(subjects)
    
    subject = subjects{i};
    ok = true;
    
    clobber = params.general.clobber;
    
    outdir = sprintf( '%s/%s', params.io.output_dir, subject );
    figdir = sprintf( '%s/figures', outdir );
    flagdir = sprintf( '%s/flags', outdir );
   
    flag_done = sprintf( '%s/eeg_preproc_1.done', flagdir );
    
    if ~exist(flag_done, 'file')
        fprintf('\n\tSubject %s has no ICA results! Skipping.\n', subject);
        continue;
    end
    
    flag_file = sprintf( '%s/eeg_preproc_2.done', flagdir );
    
    if exist(flag_file, 'file') && ~clobber
        fprintf('\n\tICA rejection already performed for subject %s! Skipping.\n', subject);
        continue;
    end
    
    if exist(flag_file, 'file')
        delete( flag_file );
    end
    
    input_file = sprintf('%s/results_preproc_eeg_1.mat', outdir);
    results_file = sprintf('%s/results_preproc_eeg_2.mat', outdir);
    load( input_file );
    
    cfg = params.eeg.ica.plots.cfg;
%     cfg.colormap = 'jet';
%     cfg.component = 1:20;       % specify the component(s) that should be plotted
%     cfg.layout    = 'acticap-64ch-standard2.mat'; % specify the layout file that should be used for plotting
%     cfg.comment   = 'no';
    h = figure;
    h.Color = 'w';
    ft_topoplotIC(cfg, data.eeg.ica);
    resize_window(h,[1000 1000]);

    cfg.viewmode = 'component';
    evalc('ft_databrowser(cfg, data.eeg.ica)');
    resize_window(gcf,[1500 900]);

    % Prompt for bad components
    channels = input('\n\tSubject %s: Enter ICA components to remove (space delimited): ','s');
    to_rem = cellfun(@str2num, strsplit(channels, ' '));

    if ~isempty(to_rem)
       fprintf('Removing %d components...\n', length(to_rem));
       cfg = [];
       cfg.component = to_rem;
       [~,data.eeg.ft = ft_rejectcomponent(cfg, data.eeg.ica, data.eeg.ft);
       
    end
    
    data.eeg.ica = [];
    data.eeg.ica.removed = to_rem;

    fprintf('\nDone. Saving results...\n');
    save(results_file, 'results', 'data');
    if params.eeg.ica.plots.save
        saveas(gcf,sprintf('%s/ica_browser_eeg.fig',figdir));
        saveas(h,sprintf('%s/ica_topoplot_eeg.png',figdir));
    end

    fclose( fopen(flag_file,'w+') );

    close all;

end